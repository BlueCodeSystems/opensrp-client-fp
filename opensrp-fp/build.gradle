buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3'
        classpath 'com.google.gms:google-services:4.3.3'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

// Override groupId and version for this fork's publication
group = "io.github.bluecodesystems"
version = project.hasProperty('VERSION_NAME') ? project.VERSION_NAME : "1.0.0-SNAPSHOT"

jacoco {
    toolVersion = "0.8.8"
}

android {

    /*
    * This allows running the app in the release variant. Make sure to add this configs to the
    * local.properties files when you need to use them
    * */
    if (project.rootProject.file("local.properties").exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        if (properties != null && properties.containsKey("store.file") && properties.containsKey("store.password") && properties.containsKey("key.password")) {
            signingConfigs {
                release {
                    storeFile file(properties['store.file'])
                    storePassword properties['store.password']
                    keyAlias = 'release'
                    keyPassword properties['key.password']
                }
                debug {
                    storeFile file(properties['store.file'])
                    storePassword properties['store.password']
                    keyAlias = 'release'
                    keyPassword properties['key.password']
                }
            }
        }
    }

    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        if (properties != null && properties.containsKey("store.file") && properties.containsKey("store.password") && properties.containsKey("key.password")) {
            signingConfig signingConfigs.release
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'org.smartregister.fp.FPEventBusIndex']
            }
        }
    }


    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    dataBinding {
        enabled = true
    }

    // Enable publishing of the release variant and attach sources
    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }

    // Generate BuildConfig for library (AGP 7+ disables it by default)
    buildFeatures {
        buildConfig = true
    }

    namespace "org.smartregister.fp"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {
    def powerMockVersion = '2.0.4'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:support-compat:29.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation('io.github.bluecodesystems:opensrp-client-native-form-new:3.1.3@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'io.ona.rdt-capture', module: 'lib'
        exclude group: 'io.ona.CircleProgressbar', module: 'lib'
    }
    implementation('org.smartregister:opensrp-client-core:1.10.9002-TEST-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'io.ona.rdt-capture', module: 'lib'
    }
    implementation('org.smartregister:opensrp-client-configurable-views:1.1.5-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-media-compat'
        exclude group: 'com.android.support', module: 'cardview-v7'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    annotationProcessor 'com.jakewharton:butterknife:10.2.0'
    implementation 'net.zetetic:android-database-sqlcipher:4.2.0@aar'
    implementation 'commons-validator:commons-validator:1.6'
    /*implementation('com.crashlytics.sdk.android:crashlytics:2.9.3@aar') {
        transitive = true
    }*/
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.greenrobot:eventbus:3.1.1'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.1.1'
    implementation 'com.google.guava:guava:24.1-jre'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex.rxjava2:rxjava:2.2.15'
    implementation 'com.evernote:android-job:1.2.6'
    implementation 'com.github.lecho:hellocharts-android:v1.5.6'
    implementation 'id.zelory:compressor:3.0.1'
    implementation('com.android.support:design:28.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
    }

    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    //implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.25'
    implementation 'de.hdodenhof:circleimageview:3.0.1'
    implementation 'org.jeasy:easy-rules-core:3.3.0'
    implementation 'org.jeasy:easy-rules-mvel:3.3.0'
    implementation 'io.github.bluecodesystems:circleprogressbar:1.0.0'
    implementation 'io.github.bluecodesystems:materialedittext:3.1.6'
    implementation 'io.github.bluecodesystems:opensrp-client-utils:0.0.6'

    // Core library desugaring for Java 8+ APIs on older Android devices
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation('com.squareup:fest-android:1.0.8') {
        exclude module: 'support-v4'
    }
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2') {
        exclude group: 'com.google.code.findbugs'
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([debugTree])
    executionData.setFrom fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task printTasks {
    def projects = project.allprojects {}
    def reportT = project.tasks.withType(JacocoReport).findAll {
        it instanceof JacocoReport
    }

    println "PROJECT TASKS"
    def tSize = reportT.size()
    println "SIZE : $tSize"
    reportT.each {
        println "$it"
    }
}

task javadoc(type: Javadoc) {
    failOnError false
    def mainSrc = "$project.projectDir/src/main/java"
    source = files([mainSrc])
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
}

// ---- javadoc.jar placeholder for Android ----
// Maven Central requires a javadoc jar. For Android, publish an empty one or use Dokka.
tasks.register("javadocJar", Jar) {
    archiveClassifier.set("javadoc")
    from(layout.projectDirectory.dir("empty-javadoc"))
}

// Maven Central publishing configuration (OSSRH s01)
afterEvaluate {
    publishing {
        publications {
            create("release", MavenPublication) {
                def relComp = components.findByName('release') ?: components.findByName('default')
                if (relComp != null) {
                    from relComp
                } else {
                    artifact("$buildDir/outputs/aar/${project.name}-release.aar")
                }
                artifact tasks.named("javadocJar")
                artifactId = "opensrp-client-fp"

                // For Central bundle releases, strip SNAPSHOT and local module deps from the published POM
                if ((project.findProperty('centralRelease')?.toString()?.toBoolean()) == true) {
                    pom.withXml {
                        def n = asNode()
                        def deps = n.get('dependencies')?.getAt(0)
                        if (deps) {
                            deps.children().removeAll { d ->
                                def aid = d.artifactId?.text()
                                def ver = d.version?.text()
                                ver?.endsWith('SNAPSHOT') || ['circleprogressbar','opensrp-client-simprints','materialedittext','opensrp-client-utils'].contains(aid)
                            }
                        }
                    }
                }

                pom {
                    name.set("OpenSRP Client Family Planning (BlueCode fork)")
                    description.set("BlueCode-maintained fork of the OpenSRP Family Planning library")
                    url.set("https://github.com/BlueCodeSystems/opensrp-client-fp")
                    licenses {
                        license {
                            name.set("Apache-2.0")
                            url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }
                    developers {
                        developer {
                            id.set("andrel")
                            name.set("Andre Lesa")
                            email.set("engineering@bluecodeltd.org")
                        }
                    }
                    scm {
                        connection.set("scm:git:git://github.com/BlueCodeSystems/opensrp-client-fp.git")
                        developerConnection.set("scm:git:ssh://github.com:BlueCodeSystems/opensrp-client-fp.git")
                        url.set("https://github.com/BlueCodeSystems/opensrp-client-fp")
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = findProperty("ossrhUsername") as String
                    password = findProperty("ossrhPassword") as String
                }
            }
            // Optional local file-based repository to create a Central-compatible bundle
            if ((project.findProperty('centralBundle')?.toString()?.toBoolean()) == true) {
                maven {
                    name = "CentralBundle"
                    url = layout.buildDirectory.dir("central-bundle")
                }
            }
        }
    }
}

afterEvaluate {
    signing {
        // Sign only when not publishing to Maven Local and when keys are provided
        def taskNames = gradle.startParameter.taskNames
        def isMavenLocal = taskNames.any { it.contains('publishToMavenLocal') }
        def skip = project.findProperty('skipSigning')?.toString()?.toBoolean() ?: false
        def useCmd = project.findProperty('useGpgCmd')?.toString()?.toBoolean() ?: false

        required {
            !isMavenLocal && !skip && (
                project.findProperty('signing.keyId') ||
                project.findProperty('signingKey') ||
                useCmd
            )
        }

        if (useCmd) {
            // Use local GnuPG for signing (configure keyName/passphrase in ~/.gradle/gradle.properties)
            useGpgCmd()
        }

        def inMemKey = project.findProperty('signingKey')
        def inMemPass = project.findProperty('signingPassword')
        if (inMemKey && inMemPass) {
            useInMemoryPgpKeys(inMemKey.toString(), inMemPass.toString())
        }

        sign(publishing.publications['release'])
    }
}

// Optionally generate legacy checksums for portal validators
tasks.register("generateCentralBundleChecksums") {
    dependsOn tasks.matching { it.name == 'publishReleasePublicationToCentralBundleRepository' }
    doLast {
        def repoDir = layout.buildDirectory.dir("central-bundle").get().asFile
        if (!repoDir.exists()) return
        repoDir.eachFileRecurse { f ->
            if (f.isFile() && !(f.name.endsWith('.md5') || f.name.endsWith('.sha1') || f.name.endsWith('.asc'))) {
                def md5 = java.security.MessageDigest.getInstance('MD5')
                def sha1 = java.security.MessageDigest.getInstance('SHA-1')
                f.withInputStream { is ->
                    byte[] buf = new byte[8192]
                    int r
                    while ((r = is.read(buf)) > 0) {
                        md5.update(buf, 0, r)
                        sha1.update(buf, 0, r)
                    }
                }
                def toHex = { bytes -> bytes.collect { String.format('%02x', it) }.join() }
                new File(f.parentFile, f.name + '.md5').text = toHex(md5.digest())
                new File(f.parentFile, f.name + '.sha1').text = toHex(sha1.digest())
            }
        }
    }
}

// Zip the local Central bundle repository for upload in the Central Portal UI
tasks.register("zipCentralBundle", Zip) {
    dependsOn tasks.named('generateCentralBundleChecksums')
    // Only include the current coordinates/version, but preserve Maven layout
    def groupPath = project.group.toString().replace('.', '/')
    def artifact = 'opensrp-client-fp'
    def versionDir = "${groupPath}/${artifact}/${project.version}/**"
    from(layout.buildDirectory.dir("central-bundle")) {
        include versionDir
    }
    destinationDirectory = layout.buildDirectory.dir("distributions")
    archiveBaseName.set("central-bundle-opensrp-client-fp")
    archiveVersion.set(project.version)
}

// Helper: print path and files to verify POM exists
tasks.register("printCentralBundleLayout") {
    dependsOn tasks.matching { it.name == 'publishReleasePublicationToCentralBundleRepository' }
    doLast {
        def base = layout.buildDirectory.dir('central-bundle').get().asFile
        def path = new File(base, project.group.toString().replace('.', '/') + "/opensrp-client-fp/" + project.version)
        println "Bundle path: ${path}"
        if (path.exists()) path.eachFile { println it.name } else println "Bundle path not found"
    }
}

// apply from: '../maven.gradle'
